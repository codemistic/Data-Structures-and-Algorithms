//link: https://leetcode.com/problems/shortest-common-supersequence/description/



string shortestCommonSupersequence(string str1, string str2) {
        int n = str1.length();
        int m = str2.length();
        vector<vector<int>> dp(n+1,vector<int>(m+1,0));
        for(int i = 1; i <= n ; i++ ){
            for(int j = 1 ;j <= m ; j++){
                if( str1[i-1] == str2[j-1]){
                    dp[i][j] = 1+ dp[i-1][j-1];
                }
                else{
                    dp[i][j] = max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }
        string lcs="";
        int i =n, j=m;
        while(i>=1 && j>=1){
            if(str1[i-1] == str2[j-1]){
                lcs.push_back(str1[i-1]);
                i--,j--;
            }
            else if( dp[i-1][j] > dp[i][j-1]){
                lcs.push_back(str1[i-1]);
                i--;
            }
            else {
                lcs.push_back(str2[j-1]);
                j--;
            }
        }
        while(i>0){ lcs.push_back(str1[i-1]); i--;}
        while(j>0){ lcs.push_back(str2[j-1]); j--;}
        reverse(lcs.begin(),lcs.end());
        cout<<lcs;


        string ans="";
        return lcs;
    }
