

//link: https://leetcode.com/problems/wildcard-matching/description/


bool solve(int i, int j, string s1, string s2,vector<vector<int>>& dp){
        //base case
        if(i<0 && j<0) return true;
        if(i>=0 && j<0) return false;
        if(i<0 && j>=0){
            for(int k =j;k>=0;k--){
                if(s2[k]!='*') return false;
            }
            return true;
        }

        if(dp[i][j]!=-1) return dp[i][j];
        if(s1[i] == s2[j] || s2[j] == '?'){
            return dp[i][j] = solve(i-1,j-1,s1,s2,dp);
        }

        if(s2[j] == '*' ){
            return dp[i][j] = solve(i,j-1,s1,s2,dp) | solve(i-1,j,s1,s2,dp);
        }

        return dp[i][j] = false;
    }
    bool isMatch(string s, string p) {
        int n = s.length();
        int m = p.length();
        vector<vector<bool>> dp(n+1,vector<bool>(m+1,-1));
        dp[0][0] = true;
        for(int i=0;i<=n;i++){
            dp[i][0] = false;
        }
        for(int i=0;i<=m;i++){
            bool is = true;
            for(int j=0;j<i;j++){
                if(p[j]!='*'){
                    is = false;
                }
            }
            dp[0][i] = is;
        }
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(s[i-1]==p[j-1] || p[j-1]=='?'){
                    dp[i][j] = dp[i-1][j-1];
                }
                else if(p[j-1]=='*'){
                    dp[i][j] = dp[i][j-1] | dp[i-1][j];
                }
                else{
                    dp[i][j] = false;
                }
            }
        }


        return dp[n][m];
    }
